<?php

/**
 * @file social_wall.module
 * TODO: Enter file description here.
 */

use Lns\SocialFeed\SocialFeed;

/**
 * Implements hook_menu().
 */
function social_wall_menu() {

  $items['admin/config/social_wall'] = array(
    'title' => 'Social wall configuration',
    'description' => 'Bluelink configuration',
    'position' => 'left',
    'weight' => -100,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer social_wall configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  return $items;
}

function social_wall_libraries_info() {
  $libraries['salvattore'] = array(
    'name' => 'salvattore',
    'vendor url' => 'http://salvattore.com',
    'download url' => 'https://github.com/rnmp/salvattore',
    'version arguments' => array(
      'file' => 'dist/salvattore.min.js',
      // Salvattore 1.0.7
      'pattern' => '/Salvattore (\d+\.+\d+.+\d+)/',
      'lines' => 2,
    ),
    'files' => array(
      'js' => array(
        'dist/salvattore.min.js' => array(
          'scope' => 'footer'
        ),
      )
    )
  );

  return $libraries;
}


/**
 * Implements hook_block_info().
 */
function social_wall_block_info() {
  $blocks['social_wall'] = array(
    'info' => t('Social wall'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function social_wall_block_configure($delta = '') {
  $form = array();

  if ($delta != 'social_wall') {
    return $form;
  }

  $form['social_wall_card_count'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of cards'),
    '#default_value' => variable_get('social_wall_card_count'),
  );

  return $form;
}

/**
 * Implements hook_block_save().
 */
function social_wall_block_save($delta = '', $edit = array()) {
  if ($delta != 'social_wall') {
    return;
  }

  variable_set('social_wall_card_count', $edit['social_wall_card_count']);
}

/**
 * Implements hook_block_view().
 */
function social_wall_block_view($delta = '') {
  $block = array();

  switch ($delta) {
  case 'social_wall':

    drupal_add_css(drupal_get_path('module', 'social_wall') . '/css/style.css', array(
      'group' => CSS_DEFAULT,
      'every_page' => TRUE
    ));

    $block['subject'] = t('Social Wall');
    $block['content'] = _social_wall_social_wall_content();
    break;
  }

  return $block;
}

function _social_wall_social_wall_content() {

  $render = array(
    'feed' => array(
      '#theme' => 'social_wall_feed',
      '#social_feed' => social_wall_get_social_feed()
    )
  );

  return $render;
}

/**
 * Implements hook_theme().
 */
function social_wall_theme($existing, $type, $theme, $path) {
  return array(
    'social_wall_feed' => array(
      'template' => 'social_wall_feed',
      'file' => 'theme.inc',
      'path' => drupal_get_path('module', 'social_wall') . '/theme',
      'pattern' => 'social_wall_feed__',
      'variables' => array(
        'social_feed' => NULL
      )
    ),
    'social_wall_card' => array(
      'template' => 'social_wall_card',
      'file' => 'theme.inc',
      'path' => drupal_get_path('module', 'social_wall') . '/theme',
      'pattern' => 'social_wall_card__',
      'variables' => array(
        'post' => NULL
      )
    )
  );
}

function social_wall_get_social_feed()
{
  $socialFeed = new SocialFeed();

  drupal_alter('social_wall_social_feed', $socialFeed);

  return $socialFeed;
}

function social_wall_get_provider($name)
{
  $providers = social_wall_get_providers();

  return isset($providers[$name]) ? $providers[$name] : null;
}

function social_wall_get_providers() {

  static $providers;
  if (!isset($providers)) {
    $providers = &drupal_static(__FUNCTION__);
  }

  $providers = array();

  $nonIndexedProviders = module_invoke_all('social_wall_providers');

  foreach($nonIndexedProviders as $provider) {
    $providers[$provider->getName()] = $provider;
  }

  return $providers;
}

/**
 * social_wall_get_post_type
 *
 * @param PostInterface $post
 * @return type name of the post
 */
function social_wall_get_post_type($post) {
  $types = social_wall_get_post_types();

  $typesFlipped = array_flip($types);

  return $typesFlipped[get_class($post)];
}

function social_wall_get_post_types() {

  static $types;
  if (!isset($types)) {
    $types = &drupal_static(__FUNCTION__);
  }

  $types = module_invoke_all('social_wall_post_types');

  return $types;
}


/**
 * Implements hook_preprocess_HOOK().
 */
function social_wall_preprocess_html(&$variables) {
  if (variable_get('social_wall_enable_css', 1)) {
    $svg_file = DRUPAL_ROOT . '/' . drupal_get_path('module', 'social_wall') . '/theme/symbols.svg';

    $variables['page']['page_top'][] = array(
      '#markup' => file_get_contents($svg_file),
      '#weight' => -100
    );

    drupal_add_css(drupal_get_path('module', 'social_wall') . '/css/social_wall.css');
  }
}

function social_wall_format_message($message, $references, $type) {
  if($type == 'twitter') {
    $formatter = new \Lns\SocialFeed\Formatter\TweetMessageFormatter();
    return $formatter->format($message, $references);
  }

  if($type == 'facebook') {
    $formatter = new \Lns\SocialFeed\Formatter\FacebookMessageFormatter();
    return $formatter->format($message, $references);
  }

  if($type == 'instagram') {
    $formatter = new \Lns\SocialFeed\Formatter\InstagramMessageFormatter();
    return $formatter->format($message, $references);
  }

  return $message;
}

